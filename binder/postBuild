#!/usr/bin/env bash
set -euo pipefail

# Ensure we are in repo root
cd "$(dirname "$0")/.."

# Do NOT install backend as an editable package here; we rely on PYTHONPATH set in start
# to import backend/docframe/docworkspace from the repo. Runtime deps are installed via environment.yml.
# if [ -d "ldaca_web_app/backend" ]; then
#   pip install -e ldaca_web_app/backend
# fi

# Build frontend if present
if [ -f "ldaca_web_app/frontend/package.json" ]; then
  pushd ldaca_web_app/frontend
  # Prefer reproducible installs; fall back to npm install on CI cache miss
  npm ci || npm install
  CI=false npm run build
  popd
  # Copy build to user-space web dir for nginx
  mkdir -p "$HOME/www"
  cp -r ldaca_web_app/frontend/build/* "$HOME/www/"
else
  mkdir -p "$HOME/www"
  cat > "$HOME/www/index.html" <<'HTML'
<!doctype html>
<html><head><meta charset="utf-8"/><title>LDaCA</title></head>
<body>
<h2>LDaCA Frontend not built</h2>
<p>API docs: <a href="/proxy/8080/api/docs">/proxy/8080/api/docs</a></p>
</body></html>
HTML
fi

# Write a user-space nginx configuration (no root privileges required)
mkdir -p "$HOME/nginx/logs" "$HOME/nginx/run"
cat > "$HOME/nginx/nginx.conf" <<'NGINX'
worker_processes  1;
error_log  logs/error.log warn;
pid        run/nginx.pid;

# NGINX will chroot to this prefix when -p is supplied; all paths below are relative to that prefix

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  sendfile        on;
  keepalive_timeout  65;

  server {
    listen 8080;
    server_name _;

    root   www;
    index  index.html index.htm;

    location / {
      try_files $uri $uri/ /index.html;
      add_header Cache-Control "no-cache, no-store, must-revalidate";
      add_header Pragma "no-cache";
      add_header Expires "0";
    }

    location /api/ {
      proxy_pass http://127.0.0.1:8001;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      add_header Access-Control-Allow-Origin * always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;

      if ($request_method = 'OPTIONS') {
        return 204;
      }
    }

    location /health {
      access_log off;
      return 200 "healthy\n";
      add_header Content-Type text/plain;
    }
  }
}
NGINX

# Place content under the nginx prefix directory structure used by `nginx -p $HOME/nginx`
mkdir -p "$HOME/nginx/www"
cp -r "$HOME/www"/* "$HOME/nginx/www/" 2>/dev/null || true

# Ensure jupyter-server-proxy is enabled (repo2docker base usually has it)
python - <<'PY'
try:
    from jupyter_server.extension.serverextension import toggle_serverextension_python
except Exception:
    # Older Jupyter
    from notebook.nbextensions import enable_nbextension
print("jupyter-server-proxy assumed installed")
PY

chmod +x "$PWD/start"
