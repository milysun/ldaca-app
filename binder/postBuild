#!/usr/bin/env bash
set -euo pipefail

# Ensure we are in repo root
cd "$(dirname "$0")/.."

# Do NOT install backend as an editable package here; we rely on PYTHONPATH set in start
# to import backend/docframe/docworkspace from the repo. Runtime deps are installed via environment.yml.
# if [ -d "ldaca_web_app/backend" ]; then
#   pip install -e ldaca_web_app/backend
# fi

# Install local Python libraries into site-packages (non-editable) to bake them into the image
if [ -f "docframe/pyproject.toml" ]; then
  python -m pip install ./docframe
fi
if [ -f "docworkspace/pyproject.toml" ]; then
  python -m pip install ./docworkspace
fi

# Ensure backend .env exists by copying from example if present (non-interactive)
if [ -d "ldaca_web_app/backend" ]; then
  if [ ! -f "ldaca_web_app/backend/.env" ] && [ -f "ldaca_web_app/backend/.env.example" ]; then
    cp "ldaca_web_app/backend/.env.example" "ldaca_web_app/backend/.env"
  fi
fi

# Build frontend if present
if [ -f "ldaca_web_app/frontend/package.json" ]; then
  pushd ldaca_web_app/frontend
  # Use npm ci only when a lockfile exists, else fallback to npm install
  if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ] || [ -f pnpm-lock.yaml ] || [ -f yarn.lock ]; then
    npm ci || npm install
  else
    npm install
  fi
  CI=false npm run build
  popd
  # Copy build to user-space web dir for nginx
  mkdir -p "$HOME/www"
  cp -r ldaca_web_app/frontend/build/* "$HOME/www/"
else
  mkdir -p "$HOME/www"
  cat > "$HOME/www/index.html" <<'HTML'
<!doctype html>
<html><head><meta charset="utf-8"/><title>LDaCA</title></head>
<body>
<h2>LDaCA Frontend not built</h2>
<p>API docs: <a href="/proxy/8080/api/docs">/proxy/8080/api/docs</a></p>
</body></html>
HTML
fi

# Prepare nginx prefix directories (user-space)
mkdir -p "$HOME/nginx/logs" "$HOME/nginx/run" "$HOME/nginx/tmp" \
         "$HOME/nginx/tmp/client_body" "$HOME/nginx/tmp/proxy_temp" \
         "$HOME/nginx/tmp/fastcgi_temp" "$HOME/nginx/tmp/uwsgi_temp" \
         "$HOME/nginx/tmp/scgi_temp"

# Write a user-space nginx configuration (no root privileges required)
cat > "$HOME/nginx/nginx.conf" <<'NGINX'
worker_processes  1;
error_log  logs/error.log warn;
pid        run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # All temp paths under user prefix
  client_body_temp_path tmp/client_body;
  proxy_temp_path       tmp/proxy_temp;
  fastcgi_temp_path     tmp/fastcgi_temp;
  uwsgi_temp_path       tmp/uwsgi_temp;
  scgi_temp_path        tmp/scgi_temp;

  access_log    logs/access.log;
  sendfile        on;
  keepalive_timeout  65;

  server {
    listen 8080;
    server_name _;

    root   www;
    index  index.html index.htm;

    location / {
      try_files $uri $uri/ /index.html;
      add_header Cache-Control "no-cache, no-store, must-revalidate";
      add_header Pragma "no-cache";
      add_header Expires "0";
    }

    location /api/ {
      proxy_pass http://127.0.0.1:8001;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      add_header Access-Control-Allow-Origin * always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;

      if ($request_method = 'OPTIONS') {
        return 204;
      }
    }

    location /health {
      access_log off;
      return 200 "healthy\n";
      add_header Content-Type text/plain;
    }
  }
}
NGINX

# Place content under the nginx prefix directory structure used by `nginx -p $HOME/nginx`
mkdir -p "$HOME/nginx/www"
cp -r "$HOME/www"/* "$HOME/nginx/www/" 2>/dev/null || true

# Skip explicit Jupyter extension enabling (not needed and breaks on Jupyter Server v2+)
echo "postBuild: skipping jupyter extension enabling; jupyter-server-proxy will be available if installed."

chmod +x "$PWD/start"
