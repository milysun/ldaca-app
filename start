#!/usr/bin/env bash
set -euo pipefail

# User-space startup script for Binder (repo root)
# - Starts FastAPI backend (uvicorn) on 127.0.0.1:8001
# - Starts nginx serving frontend on 8080 and proxying /api -> 8001
# - Delegates to Jupyter singleuser process provided by Binder

# Ensure working directory is repo root
cd "$(dirname "$0")"

# PYTHONPATH so backend imports docframe/docworkspace in this repo (safe with unset var)
export PYTHONPATH="${PYTHONPATH:+$PYTHONPATH:}$PWD:$PWD/docframe:$PWD/docworkspace:$PWD/ldaca_web_app/backend"

# Backend: run uvicorn in background
if [ -f "ldaca_web_app/backend/main.py" ]; then
  (
    cd ldaca_web_app/backend
    echo "Starting uvicorn on 127.0.0.1:8001"
    uvicorn main:app --host 127.0.0.1 --port 8001 --log-level info >> "$HOME/uvicorn.log" 2>&1 &
    echo $! > "$HOME/uvicorn.pid"
  )
fi

# Nginx: user-space instance with prefix $HOME/nginx
NGINX_BIN="${NGINX_BIN:-}"
if [ -z "$NGINX_BIN" ]; then
  if command -v nginx >/dev/null 2>&1; then
    NGINX_BIN="$(command -v nginx)"
  elif [ -x /usr/sbin/nginx ]; then
    NGINX_BIN="/usr/sbin/nginx"
  elif [ -x /usr/bin/nginx ]; then
    NGINX_BIN="/usr/bin/nginx"
  else
    NGINX_BIN=""
  fi
fi

if [ -n "$NGINX_BIN" ]; then
  mkdir -p "$HOME/nginx/logs" "$HOME/nginx/run" "$HOME/nginx/tmp" \
           "$HOME/nginx/tmp/client_body" "$HOME/nginx/tmp/proxy_temp" \
           "$HOME/nginx/tmp/fastcgi_temp" "$HOME/nginx/tmp/uwsgi_temp" \
           "$HOME/nginx/tmp/scgi_temp"

  # Write a safe user-space nginx.conf if missing or if it references privileged paths
  if [ ! -f "$HOME/nginx/nginx.conf" ] || grep -q "/var/log/nginx" "$HOME/nginx/nginx.conf" 2>/dev/null; then
    [ -f "$HOME/nginx/nginx.conf" ] && mv "$HOME/nginx/nginx.conf" "$HOME/nginx/nginx.conf.bak" || true
    cat > "$HOME/nginx/nginx.conf" <<'NGINX'
worker_processes  1;
error_log  logs/error.log warn;
pid        run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  client_body_temp_path tmp/client_body;
  proxy_temp_path       tmp/proxy_temp;
  fastcgi_temp_path     tmp/fastcgi_temp;
  uwsgi_temp_path       tmp/uwsgi_temp;
  scgi_temp_path        tmp/scgi_temp;

  access_log    logs/access.log;
  sendfile        on;
  keepalive_timeout  65;

  server {
    listen 8080;
    server_name _;

    root   www;
    index  index.html index.htm;

    location / {
      try_files $uri $uri/ /index.html;
      add_header Cache-Control "no-cache, no-store, must-revalidate";
      add_header Pragma "no-cache";
      add_header Expires "0";
    }

    location /api/ {
      proxy_pass http://127.0.0.1:8001;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      add_header Access-Control-Allow-Origin * always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;

      if ($request_method = 'OPTIONS') {
        return 204;
      }
    }

    location /health {
      access_log off;
      return 200 "healthy\n";
      add_header Content-Type text/plain;
    }
  }
}
NGINX
  fi

  # Ensure content is present under the configured prefix
  mkdir -p "$HOME/nginx/www"
  cp -r "$HOME/www"/* "$HOME/nginx/www/" 2>/dev/null || true

  echo "Starting nginx ($NGINX_BIN) on 8080 (prefix $HOME/nginx)"
  "$NGINX_BIN" -p "$HOME/nginx" -c "$HOME/nginx/nginx.conf" &
  echo $! > "$HOME/nginx.pid"
else
  echo "Warning: nginx binary not found; frontend proxy on /proxy/8080/ will not be available." >&2
fi

# If no args were provided (manual run), default to jupyter notebook
if [ "$#" -eq 0 ]; then
  set -- jupyter notebook --ip 0.0.0.0
fi

# Finally exec the Jupyter singleuser server (Binder injects the command/args)
exec "$@"
